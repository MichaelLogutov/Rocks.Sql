<#@ include file="$(SolutionDir)Rocks.Sql\Generators\PredicateGenerator.ttinclude" once="true" #>
<#@ import namespace="System.Collections.Generic" #><#@ import namespace="System.Globalization" #><#+


	public class PredicateTestsGenerator
	{
		private readonly TextTransformation tt;
		private readonly PredicateGeneratorConfiguration configuration;


		public PredicateTestsGenerator (TextTransformation tt, PredicateGeneratorConfiguration configuration)
		{
			this.tt = tt;
			this.configuration = configuration;
		}


		/// <summary>
		///     Performs generation of code.
		/// </summary>
		public void Generate ()
		{
			var supported_types = this.configuration.SupportedTypes;

			if (supported_types == null || supported_types.Count == 0)
				return;

			foreach (var type in supported_types)
			{
				this.GenerateAddEqualsTests (type);

				this.tt.WriteNewLines (2);
				this.GenerateAddNotEqualsTests (type);

				this.tt.WriteNewLines (2);
				this.GenerateAddGreaterTests (type);

				this.tt.WriteNewLines (2);
				this.GenerateAddGreaterOrEqualsTests (type);

				this.tt.WriteNewLines (2);
				this.GenerateAddLessTests (type);

				this.tt.WriteNewLines (2);
				this.GenerateAddLessOrEqualsTests (type);
			}
		}


		private void GenerateTest (string typeForPrefix, string methodName, Action arrange, Action act, Action assert)
		{
			var method_prefix = !string.IsNullOrEmpty (typeForPrefix)
				                    ? CultureInfo.InvariantCulture.TextInfo.ToTitleCase (typeForPrefix) + "_"
				                    : string.Empty;

			this.tt.PushIndent ("        ");
			{
				this.tt.WriteLine ("[TestMethod]");
				this.tt.WriteLine ("public void {0}{1} ()", method_prefix, methodName);
				this.tt.WriteLine ("{");
				this.tt.PushIndent ("    ");
				{
					this.tt.WriteLine ("// arrange");
					arrange ();

					this.tt.WriteNewLines (2);
					this.tt.WriteLine ("// act");
					act ();

					this.tt.WriteNewLines (2);
					this.tt.WriteLine ("// assert");
					assert ();
				}
				this.tt.PopIndent ();
				this.tt.WriteLine ("}");
			}
			this.tt.PopIndent ();
		}


		private void GeneratePredicateMethodTests (string type, string testedMethodName, string expectedSqlOperand)
		{
			this.GenerateTest
				(type,
				 string.Format ("{0}_ByDefault_AddsCorrectPredicate", testedMethodName),
				 arrange: () =>
				 {
					 this.tt.WriteLine ("var sut = new SqlClause ();");
					 this.tt.WriteLine ("{0} value = 1;", type);
				 },
				 act: () =>
				 {
					 this.tt.WriteLine ("sut.{0} (\"Id\", \"@x\", value);", testedMethodName);
					 this.tt.WriteLine ("var sql = sut.GetSql ();");
					 this.tt.WriteLine ("var parameters = sut.GetParameters ();");
				 },
				 assert: () =>
				 {
					 this.tt.WriteLine ("sql.Should ().Be (\"Id {0} @x\");", expectedSqlOperand);
					 this.tt.WriteAndPushIndent ("parameters.ShouldAllBeEquivalentTo (");
					 {
						 this.tt.WriteLine ("new[]");
						 this.tt.WriteLine ("{");
						 this.tt.PushIndent ("    ");
						 {
							 this.tt.WriteLine (this.configuration.GetCreateDbParameterCode (type, "\"@x\"", "value"));
						 }
						 this.tt.PopIndent ();
						 this.tt.WriteLine ("});");
					 }
					 this.tt.PopIndent ();
				 });

			this.tt.WriteNewLines (2);

			this.GenerateTest
				(type,
				 string.Format ("{0}_Null_AddsNothing", testedMethodName),
				 arrange: () =>
				 {
					 this.tt.WriteLine ("var sut = new SqlClause ();");
					 this.tt.WriteLine ("{0}? value = null;", type);
				 },
				 act: () =>
				 {
					 this.tt.WriteLine ("sut.{0} (\"Id\", \"@x\", value);", testedMethodName);
					 this.tt.WriteLine ("var sql = sut.GetSql ();");
					 this.tt.WriteLine ("var parameters = sut.GetParameters ();");
				 },
				 assert: () =>
				 {
					 this.tt.WriteLine ("sql.Should ().Be (string.Empty);");
					 this.tt.WriteLine ("parameters.Should ().BeEmpty ();");
				 });
		}


		private void GenerateAddEqualsTests (string type)
		{
			this.GeneratePredicateMethodTests (type, "AddEquals", "=");
		}


		private void GenerateAddNotEqualsTests (string type)
		{
			this.GeneratePredicateMethodTests (type, "AddNotEquals", "<>");
		}


		private void GenerateAddGreaterTests (string type)
		{
			this.GeneratePredicateMethodTests (type, "AddGreater", ">");
		}


		private void GenerateAddGreaterOrEqualsTests (string type)
		{
			this.GeneratePredicateMethodTests (type, "AddGreaterOrEquals", ">=");
		}


		private void GenerateAddLessTests (string type)
		{
			this.GeneratePredicateMethodTests (type, "AddLess", "<");
		}


		private void GenerateAddLessOrEqualsTests (string type)
		{
			this.GeneratePredicateMethodTests (type, "AddLessOrEquals", "<=");
		}
	}


	#>