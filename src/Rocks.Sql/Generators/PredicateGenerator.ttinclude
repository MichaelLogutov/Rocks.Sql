<#@ template debug="true" hostspecific="true" language="C#" visibility="internal" #>
<#@ CleanupBehavior processor="T4VSHost" CleanupAfterProcessingtemplate="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="$(SolutionDir)Rocks.Sql\bin\$(Configuration)\Rocks.Sql.dll" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Rocks.Sql.Generators" #><#+


	public abstract class PredicateGeneratorConfiguration
	{
		/// <summary>
		///     Returns a list of types of values for methods that will be generated.
		/// </summary>
		public abstract IList<string> SupportedTypes { get; }


		/// <summary>
		///     Generates a code for creation of <see cref="IDbDataParameter" /> from
		///     given name and value parameters.
		/// </summary>
		public abstract string GetCreateDbParameterCode (string type, string nameParameterName, string valueParameterName);
	}


	public class PredicateGenerator
	{
		private readonly TextTransformation tt;
		private readonly PredicateGeneratorConfiguration configuration;


		public PredicateGenerator (TextTransformation tt, PredicateGeneratorConfiguration configuration)
		{
			this.tt = tt;
			this.configuration = configuration;
		}


		/// <summary>
		///     Performs generation of code.
		/// </summary>
		public void Generate ()
		{
			var supported_types = this.configuration.SupportedTypes;
			if (supported_types == null || supported_types.Count == 0)
				return;

			foreach (var type in supported_types)
			{
				this.GenerateAddEqualsMethod (type);

				this.tt.WriteMethodsSeparator ();
				this.GenerateAddNotEqualsMethod (type);

				this.tt.WriteMethodsSeparator ();
				this.GenerateAddGreaterMethod (type);

				this.tt.WriteMethodsSeparator ();
				this.GenerateAddGreaterOrEqualsMethod (type);

				this.tt.WriteMethodsSeparator ();
				this.GenerateAddLessMethod (type);

				this.tt.WriteMethodsSeparator ();
				this.GenerateAddLessOrEqualsMethod (type);
			}
		}


		private void GeneratePredicateMethod (string type, string commentOperand, string methodName)
		{
			this.tt.PushIndent ("        ");
			{
				this.tt.WriteLine ("/// <summary>");
				this.tt.WriteLine ("///     Adds \"<paramref name=\"columnName\" /> {0} <paramref name=\"parameterName\" />", commentOperand);
				this.tt.WriteLine ("///     expression to the clause.");
				this.tt.WriteLine ("///     If <paramref name=\"value\"/> is null then nothing will be added.");
				this.tt.WriteLine ("/// </summary>");
				this.tt.WriteLine ("[MethodImpl (MethodImplOptions.AggressiveInlining)]");

				this.tt.WriteAndPushIndent ("public static SqlClause {0} (", methodName);
				{
					this.tt.WriteLine ("this SqlClause sqlClause,");
					this.tt.WriteLine ("[NotNull] string columnName,");
					this.tt.WriteLine ("[NotNull] string parameterName,");
					this.tt.WriteLine ("{0}? value)", type);
				}
				this.tt.PopIndent ();

				this.tt.WriteLine ("{");
				this.tt.PushIndent ("    ");
				{
					this.tt.WriteLine ("if (value == null)");
					this.tt.WriteLine ("    return sqlClause;");
					this.tt.WriteLine (string.Empty);

					this.tt.WriteAndPushIndent ("return sqlClause.{0} (columnName, ", methodName);
					this.tt.WriteLine (this.configuration.GetCreateDbParameterCode (type, "parameterName", "value") + ");");
					this.tt.PopIndent ();
				}
				this.tt.PopIndent ();
				this.tt.WriteLine ("}");
			}
			this.tt.PopIndent ();
		}


		private void GenerateAddEqualsMethod (string type)
		{
			this.GeneratePredicateMethod (type, "=", "AddEquals");
		}


		private void GenerateAddNotEqualsMethod (string type)
		{
			this.GeneratePredicateMethod (type, "&lt;&gt;", "AddNotEquals");
		}


		private void GenerateAddGreaterMethod (string type)
		{
			this.GeneratePredicateMethod (type, "&gt;", "AddGreater");
		}


		private void GenerateAddGreaterOrEqualsMethod (string type)
		{
			this.GeneratePredicateMethod (type, "&gt;=", "AddGreaterOrEquals");
		}


		private void GenerateAddLessMethod (string type)
		{
			this.GeneratePredicateMethod (type, "&gt;", "AddLess");
		}


		private void GenerateAddLessOrEqualsMethod (string type)
		{
			this.GeneratePredicateMethod (type, "&gt;=", "AddLessOrEquals");
		}
	}


	#>